using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace Dhondt
{
    public class Szamol
    {
        private Partok p;
        public Szamol()
        {
            p = new Partok("input.txt");
        }

        //-----------------------------------------------------------------------------------------------
        /// <summary>
        /// Megnezi, hogy bejut-e a bizonyospart. Ha igen akkor bekerul a listaba.
        /// </summary>
        /// <returns>Visszaadja a partok nevet amelyek bejutnak</returns>
        public List<string> KuszobSzamit()
        {
            List<string> l = new List<string>();
            double sum = p.Parts.Sum(part => part.SzavazatSzam);
            for (int i = 0; i < p.Parts.Count; i++)
            {
                if (Math.Round((double)p.Parts[i].SzavazatSzam / sum * 100) >= p.Parts[i].Szazalek)
                {
                    l.Add(p.Parts[i].PartNev);
                }
            }
            return l;
        }
        //-----------------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------
        /// <summary>
        /// Meghatarozza a Kedvezmenyezett partokat
        /// </summary>
        /// <returns>Visszaadja a kedvezmenyezett partok nevet</returns>
        public List<string> Kedvezmenyesek()
        {
            List<string> ret = new List<string>();
            for (int i = 0; i < p.Parts.Count; i++)
            {
                if (p.Parts[i].Nemzete == 1)
                {
                    ret.Add(p.Parts[i].PartNev);
                }
            }
            return ret;
        }
        //=> p.Parts.Where(part => part.Szazalek == 1).Select(part => part.PartNev).ToList();
        //-----------------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------
        /// <summary>
        /// Kivalasztja a Mandatumszamnyi partot (ez meg nem veszi figyelembe a kedvezmenyt)
        /// </summary>
        /// <returns>A Mandatumszamnyi erteket</returns>
        public List<(int,string)> MandatumKioszt() 
        {
            List<(int, string)> a = new List<(int, string)>();
            for (int i = 0; i < p.Parts.Count; i++)
            {
                for (int j = 0; j < p.Parts[i].oszlop.Count; j++)
                {
                    a.Add((p.Parts[i].oszlop[j].Item1,p.Parts[i].PartNev));
                } 
            }
            List<(int,string)> ret = a.OrderByDescending(x => x.Item1).Take(Partok.Mandatum).ToList();
            return ret;
        }
        public List<string> UjKedvezemenyezett()
        {
            List<string> kuszob = KuszobSzamit();
            List<string> kedvezmenyesek = Kedvezmenyesek();
            List<string> ki = new List<string>();
            for (int i = 0; i < kedvezmenyesek.Count; i++)
            {
                if (!kuszob.Contains(kedvezmenyesek[i]))
                {
                    ki.Add(kedvezmenyesek[i]);
                }
            }
            return ki;
        }

        public List<string> Cserenevek()
        {
            List<string> kedvezmenyesek = UjKedvezemenyezett();
            List<(int, string)> mandatumosok = MandatumKioszt();
            List<string> csereNevek = new List<string>();
            for (int i = 0; i < kedvezmenyesek.Count; i++)
            {
                for (int j = 0; j < mandatumosok.Count; j++)
                {
                    if (mandatumosok[j].Item2 != kedvezmenyesek[i])
                    {
                        csereNevek.Add(kedvezmenyesek[i]);
                    }
                }
            }
            return csereNevek;
        }
        public List<(int,string)> Cserelget()
        {
            List<string> csere = Cserenevek();
            List<(int, string)> mandatumosok = MandatumKioszt().Take(10-csere.Count).ToList();
            foreach (var kp in csere)
            {
                int max = p.Parts.Find(x => x.PartNev == kp).oszlop.Select(x=>x.Item1).Max();
                mandatumosok.Add((max, kp));
            }
            return mandatumosok;
        }
            //int j = 0;
            //for (int i = mandatumosok.Count-1; i > mandatumosok.Count-1-csere.Count; i--)
            //{
            //    mandatumosok[i] = (p.Parts.Select(x=>x.SzavazatSzam).Where(x=>x.Pa),csere[j]);
            //    j++;
            //}
        }

        //-----------------------------------------------------------------------------------------------
        //-----------------------------------------------------------------------------------------------
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>

        //-----------------------------------------------------------------------------------------------
    }
