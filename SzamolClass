using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Mail;

namespace Dhondt
{
    /// <summary>
    /// Ez a class tartalmaz minden számítást ami a mandátumkiosztáshoz kapcsolódik. Ha a végeredményt szeretnénk akkor elég
    /// a Cserelget()-et használni mivel ez kiadja a pártok nevét és mellé a mandátumuk számát.
    /// </summary>
    class Szamol
    {
        public Partok p { get; }

        /// <summary>
        /// Számol osztály konstruktora, példányosítja a Partok objektumot az adott fájlnévvel.
        /// </summary>
        public Szamol(string fajlNev)
        {
            p = new Partok(fajlNev);
        }

        /// <summary>
        /// Számítja és visszaadja azoknak a pártoknak a listáját, amelyek átlépnek a százalékos küszöb értékükön.(minden pártnak az utolsó adattagja a százalék értéke)
        /// </summary>
        /// <returns>A megadott küszöbértéket meghaladó pártok listája.</returns>
        public List<string> KuszobSzamit()
        {
            double sum = p.Parts.Sum(part => part.SzavazatSzam);
            return p.Parts.Where(part => Math.Round((double)part.SzavazatSzam / sum * 100) >= part.Szazalek).Select(part => part.PartNev).ToList();
        }
        /// <summary>
        /// Visszaadja azon pártok neveit, amelyek kedvezményben részesülnek.(tehát a nemzetiség mezőn 1-es szám található)
        /// </summary>
        /// <returns>A kedvezményben részesülő pártok neveinek listája.</returns>
        public List<string> Kedvezmenyesek() => p.Parts.Where(part => part.Nemzete == 1).Select(part => part.PartNev).ToList();

        /// <summary>
        /// Kiosztja a mandátumokat a partok között az oszlopok alapján.(Kiválasztja a mandátumszámnyszi legnagyobb számot.)
        /// </summary>
        /// <returns>A mandátumot kapó szavazatszám értéke és pártneve lista.</returns>
        public List<(int, string)> MandatumKioszt() => p.Parts.SelectMany(part => part.oszlop.Select(item => (item.Item1, part.PartNev))).OrderByDescending(x => x.Item1).Take(Partok.Mandatum).ToList();

        /// <summary>
        /// Összefésüli azokat a pártokat melyek kedvezményezettek (nemzetiségiek) és a küszöböt is átlépték.
        /// </summary>
        /// <returns>String típusú lista mely a fenti tulajdonságú Pártnevekkel tér vissza.</returns>
        public List<string> UjKedvezemenyezett()
        {
            List<string> kuszob = KuszobSzamit();
            List<string> kedvezmenyesek = Kedvezmenyesek();
            return kedvezmenyesek.Where(kedv => kuszob.Contains(kedv)).ToList();
        }

        /// <summary>
        /// Kiválasztja azokat a pártokat, amelyek kedvezményezettek de nincsenek jelen a mandátumosok között.
        /// </summary>
        /// <returns>Azoknak a pártoknak a listája, amelyek kedvezményezettek de nincsenek jelen a mandátumosok között.</returns>
        public List<string> Cserenevek()
        {
            List<string> kedvezmenyesek = UjKedvezemenyezett();
            List<(int, string)> mandatumosok = MandatumKioszt();
            return kedvezmenyesek.Where(kedv => !mandatumosok.Any(mand => mand.Item2 == kedv)).Distinct().ToList();
        }

        /// <summary>
        /// Ellenőrzi, hogy van-e kiváltságos párt ami nem kapott mandátumot és ennek megfelelően kicserélgeti őket.
        /// </summary>
        /// <returns>(Szavazatszám mellyel mandátumot ért el,pártnév)</returns>
        public List<(int, string)> Cserelget()
        {
            List<string> csere = Cserenevek();
            List<(int, string)> mandatumosok = MandatumKioszt().Take(Partok.Mandatum - csere.Count).ToList();
            var maxValues = csere.Select(kp =>
            {
                int max = p.Parts.Find(x => x.PartNev == kp).oszlop.Select(x => x.Item1).Max();
                return (max, kp);
            });
            mandatumosok.AddRange(maxValues);
            return mandatumosok;
        }
        /// <summary>
        /// Átforgatja truera az adott párt oszlopjában az Item2 ha mandátumot ért el vele.
        /// </summary>
        public void Atfordit()
        {
            List<(int, string)> mandList = Cserelget();

            foreach (var mand in mandList)
            {
                string partName = mand.Item2;
                int numberToFind = mand.Item1;

                Part foundPart = p.Parts.FirstOrDefault(part => part.PartNev == partName);

                if (foundPart != null)
                {
                    for (int i = 0; i < foundPart.oszlop.Count; i++)
                    {
                        if (foundPart.oszlop[i].Item1 == numberToFind && foundPart.oszlop[i].Item2 == false)
                        {
                            foundPart.oszlop[i] = (numberToFind, true);
                        }
                    }
                }
            }
        }

    }
}
