using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace DHontProjekt
{
    public class Szamol : Partok
    {
		//Alap mátrix 
        List<int> matrixLista;
		
		//Az alapmátrixot feltölti 0-kal
        public Szamol(List<int> szavazatszam, List<string> partnev) : base(partnev, szavazatszam)
        {
            this.matrixLista = new List<int>();
        }
		
		//A mátrix 0-it lecseréli az indexel osztott szavazatszámokkal.
        public void matrixFel()
        {
            int j = 1;
            matrixLista = Enumerable.Range(1, mandatum * partszam).Select(i => (int)Math.Round((double)szavazatszam[i % partszam] / j, 0)).ToList();
        }
		
		//Kiszedi az első mandátomszányi érték indexét
        public List<int> sorbaRendez()
        {
            var eredmeny = matrixLista.Select((ertek, index) => new { Ertek = ertek, Index = index }).OrderByDescending(a => a.Ertek).Take(mandatum).Select(x => x.Index).ToList();
            return eredmeny;
        }
		
		//Vissza adja az értékek indexét a már szűrt listából
        public List<int> szavazatSorbaIndex()
        {
            var szavazatSorba = szavazatszam.Select((ertek, index) => new { Ertek = ertek, Index = index }).OrderByDescending(a => a.Ertek).Select(x => x.Index).ToList();
            return szavazatSorba;
        }
		
		//Vissza adja az értékek értkét a már szűrt listából
        public List<int> szavazatSorbaErtek()
        {
            var szavazatSorba = szavazatszam.Select((ertek, index) => new { Ertek = ertek, Index = index }).OrderByDescending(a => a.Ertek).Select(x => x.Ertek).ToList();
            return szavazatSorba;
        }
		
		//Megszámolja hogy a pártok hány mandátumot kapnak
        public List<int> partSzavazat() 
        {
            List<int> kapottMandatum = new List<int>() { 0, 0, 0, 0, 0, 0 };
            for (int i = 0; i < mandatum; i++)
            {
                kapottMandatum[sorbaRendez()[i] % 6]++;
            }
            return kapottMandatum;
        }
		
		//	Megnézik ki hány százalék szavazatot kapot az összesre nézve
        public List<double> osszesSzavazat()
        {
            int ossz = szavazatszam.Sum();
            return szavazatszam.Select(sz => Math.Round((double)sz / ossz * 100, 1)).ToList();
        }
		
		//Megnézi, hogy hány százaléknyi szabvazatot kapnak a mandátumott kapotttak közül
        public List<double> mandatumPartonBelul()
        {
            List<int> mPartonBelul = partSzavazat().Where(a => a != 0).ToList();
            int ossz = mPartonBelul.Sum();
            return mPartonBelul.Select(i => Math.Round((double)szavazatSorbaErtek()[i] / ossz * 100, 1)).ToList();
        }
		
		//Meghatározza a mandátumarányt
        public List<double> mandatumArany()
        {
            return Enumerable.Range(0, partszam).Select(i => Math.Round((double)partSzavazat()[i] / mandatum * 100, 1)).ToList();
        }

    }
	public class Szimulacio : Partok
	{
		private int szelesseg;
		private int magassag;
		Szamol sz = new Szamol();
		public Szimulacio(List<string> partnev,List<int> szavazatszam,int szelesseg,int magassag) : base(szavazatszam,szavazatszam)
		{
			this.szelesseg = Partok.partszam + 1;
			this.magassag = Partok.partszam + 12;
		}
		
		public void ElsoTabla()
		{
			PrintLine();
			PrintRow(ConsoleColor.Black,ConsoleColor.DarkCyan,"I. Választási eredmény");
			PrintLine();
			PrintRow(ConsoleColor.Black, ConsoleColor.DarkGray,"Pártok:", string.Join(" ",partnev));
			PrintLine();
			PrintRow(ConsoleColor.Black, ConsoleColor.DarkGray,"Szavazatok száma:", string.Join(" ",szavazatszam));
			PrintLine();
		}
		public void MasodikTabla()
		{
			int i = Partok.mandatum;
			PrintLine();
			PrintRow(ConsoleColor.Black,ConsoleColor.DarkCyan,"II. A D'Hondt-mátrix kiszámítása");
			PrintLine();
			PrintRow(ConsoleColor.Black, ConsoleColor.DarkGray,"Osztók","Hányadosok");
			PrintLine();
			while(i>0)
			{
				PrintRow(ConsoleColor.Black, ConsoleColor.DarkGray,szavazatszam.matrixFel());
				i--;
			}
		}

		public void PrintLine()
        {
            Console.WriteLine(new string('-', szelesseg));
        }
		
		public void PrintRow(ConsoleColor foregroundColor ,ConsoleColor backgroundColor, params string[] columns)
        {
            int width = (tableWidth - columns.Length) / columns.Length;
            string row = "|";

            foreach (string column in columns)
            {
                row += AlignCentre(column, width) + "|";
            }
            Console.ForegroundColor = foregroundColor;
            Console.BackgroundColor = backgroundColor;
            Console.WriteLine(row);
            Console.ResetColor();
        }		
		public string AlignCentre(string text, int width)
        {
            text = text.Length > width ? text.Substring(0, width - 3) + "..." : text;

            if (string.IsNullOrEmpty(text))
            {
                return new string(' ', width);
            }
            else
            {
                return text.PadRight(width - (width - text.Length) / 2).PadLeft(width);
            }
        }
	}
	
    public class Partok
    {
        public static int partszam;
        public static int mandatum;
        public List<string> partnev;
        public List<int> szavazatszam;
        public Partok(string sor)
        {
            partnev = new List<string>();
            szavazatszam = new List<int>();
            List<string> sorSplit = sor.Split(' ').ToList();
            partnev.Add(sorSplit[0]);
            szavazatszam.Add(int.Parse(sorSplit[1]));
            partszam++;
        }

        public Partok(List<string> partnev, List<int> szavazatszam)
        {
            this.partnev = partnev;
            this.szavazatszam = szavazatszam;

        }
    }
    public class Program
    {
        static void Main(string[] args)
        {

            Partok.mandatum = Convert.ToInt32(File.ReadAllLines("input.txt").Take(1).First());
            List<Partok> adatok = Array.ConvertAll(File.ReadAllLines("input.txt").Skip(1).ToArray(), (sor) => new Partok(sor)).ToList();
            Szimulal sz = new Szimulal();
            sz.Kiir();
            Console.ReadKey();

        }
    }
}
