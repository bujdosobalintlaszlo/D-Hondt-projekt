using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Dhondt
{
    class Szimulacio
    {
        private int counter = 1;
        private static Random r = new Random();
        public Szimulacio()
        {

        }
        /// <summary>
        /// Kigenerálja a pártoknak a számát 15 és 100 között
        /// </summary>
        /// <returns>visszatér a pártszámmal.</returns>
        private int PartSzamGeneral()
        {
            int partsz = r.Next(15, 100);
            return partsz;
        }
        /// <summary>
        /// Kigenerálja a Mandátumok számát a Pártszám figyelembe vételével
        /// </summary>
        /// <returns>visszatér a mandátumszámmal.</returns>
        private int MandatumGeneral()
        {
            int mandatumsz = 0;
            if (PartSzamGeneral() > 50)
            {
                mandatumsz = PartSzamGeneral()*3;
            }
            else
            {
                mandatumsz = PartSzamGeneral() * 2;
            }
            return mandatumsz;
        }
        /// <summary>
        /// Lefuttatja azokat a függvényeket amikre szükségünk van a Consoleon való megjelenítéshez.
        /// </summary>
        public void Lefuttat()
        {
            int db = 2;
            GeneralMasodikResz(db, PartSzamGeneral(), MandatumGeneral());
            for (int i = 0; i < db + 1; i++)
            {
                Szamol sz = new Szamol($"inp{i}.txt");
                sz.Atfordit();
                List<(int, string)> k = sz.Cserelget();
                ElsoTablaKiir(sz.p);
                MasodikTabla(sz.p);
                HarmadikTablaKiir(k);
                NegyedikTabla(k);
            }
        }
        /// <summary>
        /// Azokból a szavazatszámokból amelyek sok szavazatot kapnak 1/5 eséllyel megtolja a szavazatjainak a számát.
        /// </summary>
        /// <returns>Visszatér egy igaz hamis értékkel.</returns>
        private bool NagySzavazatuMegtol()
        {
            int szam = r.Next(1, 6);
            return (szam < 5) ? false : true;
        }
        /// <summary>
        /// Eldönti, hogy nagyobb szavazat szám legyen vagy kisebb
        /// </summary>
        /// <returns>visszatér egy igaz hamis értékkel</returns>
        private bool GeneralElsoResz() {
            int szam = r.Next(1,16);
            return (szam < 15) ? false : true;
        }
        /// <summary>
        /// A mandátum számot beleírja a fájlba +
        /// Egy sort ír a fájlba
        /// </summary>
        /// <param name="n">indexelés</param>
        /// <param name="partSzam">Pártszám</param>
        /// <param name="mandatumSzam">MandátumSzám</param>
        public void SorbaIr(int n,int partSzam,int mandatumSzam)
        {
            using (StreamWriter w = new StreamWriter($"inp{n}.txt"))
            {
                List<int> szazalekok = new List<int>() { 5, 10, 15 };
                w.WriteLine(mandatumSzam);
                for (int i = 1; i <= partSzam; i++)
                {
                    if (GeneralElsoResz())
                    {
                        if (NagySzavazatuMegtol())
                        {
                            w.WriteLine($"Párt{i} {r.Next(0, 2)} {r.Next(410000, 450000)} {szazalekok[r.Next(1, 3)]}");
                        }
                        else
                        {
                            w.WriteLine($"Párt{i} {r.Next(0, 2)} {r.Next(225000, 330000)} {szazalekok[r.Next(1, 3)]}");
                        }
                    }
                    else
                    {
                        w.WriteLine($"Párt{i} {r.Next(0, 2)} {r.Next(0, 135000)} {szazalekok[r.Next(0, 2)]}");
                    }
                }
            }
        }
        /// <summary>
        /// Összetartja a Generálási folyamatot, itt fut le egybe.
        /// </summary>
        /// <param name="db">Mennyiszer fusson le</param>
        /// <param name="partSzam">PartSzám</param>
        /// <param name="mandatumSzam">Mandátumszám</param>
        public void GeneralMasodikResz(int db, int partSzam, int mandatumSzam)
        {
            int n = 1;
            while (n <= db)
            {
                SorbaIr(n, partSzam, mandatumSzam);
                n++;
            }
        }
        /// <summary>
        /// Megjelenítés PártNév - Szavazatszém szerint
        /// </summary>
        /// <param name="p">Partok típusú változó</param>
        public void ElsoTablaKiir(Partok p)
        {
            int maxPartNevLength = p.Parts.Max(x => x.PartNev.Length);
            Console.WriteLine($"{counter} választási eredmény");
            p.Parts.ForEach(x =>
            {
                string paddedPartNev = x.PartNev.PadRight(maxPartNevLength);
                string szavazatSzamText = x.SzavazatSzam.ToString().PadRight(maxPartNevLength);
                Console.WriteLine($"{paddedPartNev} - {szavazatSzamText}");
            });
            using (StreamWriter w = new StreamWriter($"{counter}valasztasiEredmeny"))
            {
                w.WriteLine($"{counter} választási eredmény");
                p.Parts.ForEach(x =>
                {
                    w.WriteLine($"{x.PartNev} - {x.SzavazatSzam}");
                });
            }
            Console.WriteLine();
        }
        /// <summary>
        /// D'Hondt mátrix kiírása
        /// </summary>
        /// <param name="p">Partok típusú változó</param>
        public void MasodikTabla(Partok p)
        {
            using (StreamWriter w = new StreamWriter($"{counter}választás.txt"))
            {
                Console.WriteLine($"{counter} - D'Hondt mátrix számítása");
                w.WriteLine($"{counter}választás");
                foreach (var item in p.Parts)
                {
                    w.Write("Osztói:");
                    for (int i = 0; i < item.oszlop.Count; i++)
                    {
                        w.Write(item.oszlop[i].Item1 + " ");
                    }
                    w.WriteLine();
                }
            }
            Console.WriteLine("D'Hondt mátrix számítása");
            Console.WriteLine($"{counter} - D'Hondt mátrix számítása");
            Console.WriteLine($"{counter}választás");
            foreach (var item in p.Parts)
            {
                Console.Write("Osztói:");
                for (int i = 0; i < item.oszlop.Count; i++)
                {
                    if (item.oszlop[i].Item2)
                    {
                        Console.BackgroundColor = ConsoleColor.Red;
                        Console.Write(item.oszlop[i].Item1 + " ");
                        Console.BackgroundColor = ConsoleColor.Black;
                    }
                    else
                    {
                        Console.Write(item.oszlop[i].Item1 + " ");
                    }
                }
                Console.WriteLine();
            }
        }
        /// <summary>
        /// Megjelenítés PártNév: KapottMandátumszám alapján.
        /// </summary>
        /// <param name="l"></param>
        public void HarmadikTablaKiir(List<(int, string)> l)
        {
            Dictionary<string, int> stringCounts = new Dictionary<string, int>();
            foreach (var tuple in l)
            {
                string currentString = tuple.Item2;

                if (stringCounts.ContainsKey(currentString))
                {
                    stringCounts[currentString]++;
                }
                else
                {
                    stringCounts[currentString] = 1;
                }
            }
            List<string> result = stringCounts.Select(pair => $"{pair.Key}: {pair.Value}").ToList();
            result.Sort();
            stringCounts.OrderBy(x => x.Value);
            foreach (string entry in result)
            {
                Console.WriteLine(entry);
            }
            using (StreamWriter w = new StreamWriter($"{counter}valasztasvegeredmenye"))
            {
                w.WriteLine($"{counter}. választás végeredménye");
                foreach (string entry in result)
                {
                    w.WriteLine(entry);
                }

            }
            Console.WriteLine();
            counter++;
        }

        public void NegyedikTabla(List<(int, string)> l)
        {

        }
    }
}
