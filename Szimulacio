using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.IO;
using System.Linq;
using NUnit.Framework;
using NUnit.Framework.Legacy;

namespace Dhondt
{
    class Szimulacio
    {
        private int counter = 1;
        private static Random r = new Random();
        public Szimulacio()
        {

        }
        /// <summary>
        /// Kigenerálja a pártoknak a számát 15 és 100 között
        /// </summary>
        /// <returns>visszatér a pártszámmal.</returns>
        private int PartSzamGeneral()
        {
            int partsz = r.Next(15, 100);
            return partsz;
        }
        /// <summary>
        /// Kigenerálja a Mandátumok számát a Pártszám figyelembe vételével
        /// </summary>
        /// <returns>visszatér a mandátumszámmal.</returns>
        private int MandatumGeneral()
        {
            int mandatumsz = 0;
            if (PartSzamGeneral() > 50)
            {
                mandatumsz = PartSzamGeneral() * 3;
            }
            else
            {
                mandatumsz = PartSzamGeneral() * 2;
            }
            return mandatumsz;
        }
        /// <summary>
        /// Lefuttatja azokat a függvényeket amikre szükségünk van a Consoleon való megjelenítéshez.
        /// </summary>
        public void Lefuttat()
        {
            int db = 2;
            GeneralMasodikResz(db, PartSzamGeneral(), MandatumGeneral());
            for (int i = 0; i < db + 1; i++)
            {
                Szamol sz = new Szamol($"inp{i}.txt");
                sz.Atfordit();
                List<(int, string)> k = sz.Cserelget();
                ElsoTablaKiir(sz.p);
                Console.WriteLine();
                MasodikTabla(sz.p);
                Console.WriteLine();
                HarmadikTablaKiir(k);
                Console.WriteLine();
                NegyedikTabla(sz.p);
                Console.WriteLine();
                OtodikTablaKiir(k);
                Console.WriteLine();
                HatodikTablaKiir(k,sz.p);
                Console.WriteLine();
            }
        }
        /// <summary>
        /// Azokból a szavazatszámokból amelyek sok szavazatot kapnak 1/5 eséllyel megtolja a szavazatjainak a számát.
        /// </summary>
        /// <returns>Visszatér egy igaz hamis értékkel.</returns>
        private bool NagySzavazatuMegtol()
        {
            int szam = r.Next(1, 6);
            return (szam < 5) ? false : true;
        }
        /// <summary>
        /// Eldönti, hogy nagyobb szavazat szám legyen vagy kisebb
        /// </summary>
        /// <returns>visszatér egy igaz hamis értékkel</returns>
        private bool GeneralElsoResz()
        {
            int szam = r.Next(1, 16);
            return (szam < 15) ? false : true;
        }
        /// <summary>
        /// A mandátum számot beleírja a fájlba +
        /// Egy sort ír a fájlba
        /// </summary>
        /// <param name="n">indexelés</param>
        /// <param name="partSzam">Pártszám</param>
        /// <param name="mandatumSzam">MandátumSzám</param>
        public void SorbaIr(int n, int partSzam, int mandatumSzam)
        {
            using (StreamWriter w = new StreamWriter($"inp{n}.txt"))
            {
                List<int> szazalekok = new List<int>() { 5, 10, 15 };
                w.WriteLine(mandatumSzam);
                for (int i = 1; i <= partSzam; i++)
                {
                    if (GeneralElsoResz())
                    {
                        if (NagySzavazatuMegtol())
                        {
                            w.WriteLine($"Párt{i} {r.Next(0, 2)} {r.Next(410000, 450000)} {szazalekok[r.Next(1, 3)]}");
                        }
                        else
                        {
                            w.WriteLine($"Párt{i} {r.Next(0, 2)} {r.Next(225000, 330000)} {szazalekok[r.Next(1, 3)]}");
                        }
                    }
                    else
                    {
                        w.WriteLine($"Párt{i} {r.Next(0, 2)} {r.Next(0, 135000)} {szazalekok[r.Next(0, 2)]}");
                    }
                }
            }
        }
        /// <summary>
        /// Összetartja a Generálási folyamatot, itt fut le egybe.
        /// </summary>
        /// <param name="db">Mennyiszer fusson le</param>
        /// <param name="partSzam">PartSzám</param>
        /// <param name="mandatumSzam">Mandátumszám</param>
        public void GeneralMasodikResz(int db, int partSzam, int mandatumSzam)
        {
            int n = 1;
            while (n <= db)
            {
                SorbaIr(n, partSzam, mandatumSzam);
                n++;
            }
        }
        /// <summary>
        /// Megjelenítés PártNév - Szavazatszém szerint
        /// </summary>
        /// <param name="p">Partok típusú változó</param>
        public void ElsoTablaKiir(Partok p)
        {
            int maxPartNevLength = p.Parts.Max(x => x.PartNev.Length);
            Console.WriteLine($"{counter} választási eredmény");
            p.Parts.ForEach(x =>
            {
                string paddedPartNev = x.PartNev.PadRight(maxPartNevLength);
                string szavazatSzamText = x.SzavazatSzam.ToString().PadRight(maxPartNevLength);
                Console.WriteLine($"{paddedPartNev} - {szavazatSzamText}");
            });
            using (StreamWriter w = new StreamWriter($"inp{counter}valasztasieredmeny.txt"))
            {
                w.WriteLine($"{counter} választási eredmény");
                p.Parts.ForEach(x =>
                {
                    w.WriteLine($"{x.PartNev} - {x.SzavazatSzam}");
                });
            }
            Console.WriteLine();
        }
        /// <summary>
        /// D'Hondt mátrix kiírása
        /// </summary>
        /// <param name="p">Partok típusú változó</param>
        public void MasodikTabla(Partok p)
        {
            using (StreamWriter w = new StreamWriter($"inp{counter}dhondtmatrix.txt"))
            {
                Console.WriteLine($"{counter} - D'Hondt mátrix számítása");
                w.WriteLine($"{counter}választás");
                foreach (var item in p.Parts)
                {
                    w.Write("Osztói:");
                    for (int i = 0; i < item.oszlop.Count; i++)
                    {
                        w.Write(item.oszlop[i].Item1 + " ");
                    }
                    w.WriteLine();
                }
            }
            Console.WriteLine("D'Hondt mátrix számítása");
            Console.WriteLine($"{counter} - D'Hondt mátrix számítása");
            Console.WriteLine($"{counter}választás");
            foreach (var item in p.Parts)
            {
                Console.Write("Osztói:");
                for (int i = 0; i < item.oszlop.Count; i++)
                {
                    if (item.oszlop[i].Item2)
                    {
                        Console.BackgroundColor = ConsoleColor.Red;
                        Console.Write(item.oszlop[i].Item1 + " ");
                        Console.BackgroundColor = ConsoleColor.Black;
                    }
                    else
                    {
                        Console.Write(item.oszlop[i].Item1 + " ");
                    }
                }
                Console.WriteLine();
            }
        }
        /// <summary>
        /// Megjelenítés PártNév: KapottMandátumszám alapján.
        /// </summary>
        /// <param name="l"></param>
        public void HarmadikTablaKiir(List<(int, string)> l)
        {
            Dictionary<string, int> stringCounts = new Dictionary<string, int>();
            foreach (var tuple in l)
            {
                string currentString = tuple.Item2;

                if (stringCounts.ContainsKey(currentString))
                {
                    stringCounts[currentString]++;
                }
                else
                {
                    stringCounts[currentString] = 1;
                }
            }
            //kerdeses h kiszervezzuk-e
            List<string> result = stringCounts.Select(pair => $"{pair.Key}: {pair.Value}").ToList();
            result.Sort();
            stringCounts.OrderBy(x => x.Value);
            foreach (string entry in result)
            {
                Console.WriteLine(entry);
            }
            using (StreamWriter w = new StreamWriter($"inp{counter}kapottmandatumokszama.txt"))
            {
                w.WriteLine($"{counter}. választás végeredménye");
                foreach (string entry in result)
                {
                    w.WriteLine(entry);
                }

            }
            Console.WriteLine();
        }

        public void NegyedikTabla(Partok p)
        {
            int ossz = p.Parts.Sum(x => x.SzavazatSzam);
            p.Parts.ForEach(x => {
                Console.WriteLine(Math.Round((double)x.SzavazatSzam / ossz * 100, 1) + "%");
            });
            using (StreamWriter w = new StreamWriter($"inp{counter}szavazatokaranya.txt"))
            {
                w.WriteLine("Statisztika1");
                p.Parts.ForEach(x => {
                    w.WriteLine(Math.Round((double)x.SzavazatSzam / ossz * 100, 1) + "%");
                });
            }
        }
        public void OtodikTablaKiir(List<(int, string)> k,Partok p)
        {
            List<string> partok = k.Select(x => x.Item2).Distinct().ToList();
            List<(string, int)> partEsSzavszam = new List<(string, int)>();
            partok.ForEach(x =>
            {
                int szam =Convert.ToInt32(p.Parts.Where(y => y.PartNev == x).Select(z => z.oszlop[0].Item1).Distinct());
                partEsSzavszam.Add((x,szam));
            });
            //Sumolni az int részt és mindegyiket leosztani vel.
        }
        private void HatodikTablaKiir(List<(int, string)> k)
        {
            Dictionary<string, int> PartEsMandatumSzam = MandatumCount(k);
            foreach (var item in PartEsMandatumSzam)
            {
                Console.WriteLine(Math.Round((double)item.Value / Partok.Mandatum * 100, 1) + "%");
            }
            using (StreamWriter w = new StreamWriter($"inp{counter}mandatumokaranya.txt"))
            {
                foreach (var item in PartEsMandatumSzam)
                {
                    w.WriteLine(Math.Round((double)item.Value / Partok.Mandatum * 100, 1) + "%");
                }
            }
            counter++;
        }
        /// <summary>
        /// Megcsinál egy dictionary-t ahol a kulcs a pártnév és a hozzá rendelt érték pedig a mandátumainak száma
        /// </summary>
        /// <param name="k"> Egy lista amiben egy adott párt a mandátumjainak számaszor szerepel a hozzá rendelt szavazatával.</param>
        /// <returns>Egy dictionary amiben megvannak a pártok és azok mandátumainak száma</returns>
        private Dictionary<string, int> MandatumCount(List<(int, string)> k) => k.GroupBy(item => item.Item2).ToDictionary(group => group.Key, group => group.Count());


        private static readonly List<(int, string)> partok = new List<(int, string)>() {
                          (47000,"PártA"),
                          (16000,"PártB")
                      };
        //----------------------------------------------------------------------------------------------------------------------------------------------
        //Tesztek kezdete
        //itt stringé kell csinálni az l-t meg az eredmenyt is

        [Test]
        [TestCase("PártA PártB PártC PártD PártE")]
        public void KuszobTeszt(string vart)
        {
            List<string> l = vart.Split(' ').ToList();
            Szamol tSz = new Szamol("inp0.txt");
            List<string> tSzEredmeny = tSz.KuszobSzamit();
            CollectionAssert.AreEqual(l, tSzEredmeny);
        }

        [Test]
        [TestCase("PártA PártB PártC PártE PártF")]
        public void KedvezmenyesekTeszt(string vart)
        {
            List<string> l = vart.Split(' ').ToList();
            Szamol tSz = new Szamol("inp0.txt");
            List<string> tSzEredmeny = tSz.Kedvezmenyesek();
            CollectionAssert.AreEqual(l, tSzEredmeny);
        }

        [Test]
        [TestCase("47000 PártA 23500 PártA 16000 PártB 15900 PártC 15667 PártA 12000 PártD 11750 PártA 9400 PártA 8000 PártB 7950 PártC")]
        public void MandatumKiosztTeszt(string sor)
        {
            Szamol sz = new Szamol("inp0.txt");
            List<(int, string)> eredmeny = sz.MandatumKioszt();
            string formattedEredmeny = string.Join(" ", eredmeny.Select(x => $"{x.Item1} {x.Item2}"));
            Assert.That(formattedEredmeny, Is.EqualTo(sor));
        }

        [Test]
        [TestCase("PártA PártB PártC PártE")]
        public void UjKedvezemenyezett(string sor)
        {
            Szamol sz = new Szamol("inp0.txt");
            List<string> vart = sor.Split(' ').ToList();
            List<string> e = sz.UjKedvezemenyezett();
            CollectionAssert.AreEqual(vart, e);
        }

        [Test]
        [TestCase("PártE")]
        public void CserenevekTeszt(string sor)
        {
            Szamol sz = new Szamol("inp0.txt");
            List<string> vart = sor.Split(' ').ToList();
            List<string> e = sz.Cserenevek();
            CollectionAssert.AreEqual(vart, e);
        }

        [Test]
        [TestCase("47000 PártA 23500 PártA 16000 PártB 15900 PártC 15667 PártA 12000 PártD 11750 PártA 9400 PártA 8000 PártB 6000 PártE")]
        public void Cserelget(string sor)
        {
            Szamol sz = new Szamol("inp0.txt");
            List<(int, string)> eredmeny = sz.Cserelget();
            CollectionAssert.AreEqual(sor, string.Join(" ", eredmeny.Select(x => $"{x.Item1} {x.Item2}")));
        }

        [Test]
        [TestCase("PártA 1 PártB 1")]
        public void MandatumCountTeszt(string vart)
        {

            Dictionary<string, int> eredmenyDic = MandatumCount(partok);
            string eredmeny = string.Join(" ", eredmenyDic.Select(x => $"{x.Key} {x.Value}"));
            Assert.That(eredmeny, Is.EqualTo(vart));
        }
        //Tesztek vege
        //--------------------------------------------------------------------------------------------------------------------------------------
    }
}
